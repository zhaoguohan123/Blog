#pragma once
#include <fltkernel.h>
#include <ntddk.h>
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
/* -- driver.c  - include the *.tmh file that is generated by WPP --*/

//worker类型
typedef enum tagSNAP_WORKER_TYPE
{
	SNAP_WORKER_INVALID = -1,
	SNAP_WORKER_WRITE_LOG = 0,
	SNAP_WORKER_MAX
}SNAP_WORKER_TYPE;

typedef struct tagSNAP_WORKER_CONTEXT
{
	SNAP_WORKER_TYPE	WorkerType;  //worker类型
	NTSTATUS		Status;  //返回值
	BOOLEAN			WaitComplete;
	KEVENT			CompleteEvent;  //完成事件

	//模拟的TOKEN
	PACCESS_TOKEN	AccessToken;

	//end
	PVOID			WorkerParamBlock;	//worker参数
}SNAP_WORKER_CONTEXT, *PSNAP_WORKER_CONTEXT;

typedef NTSTATUS (*SnapWorkerDispatchRoutine)(PVOID pWorkerParamBlock);

typedef struct tagSANP_WORKER_MAP_ENTRY
{
	SNAP_WORKER_TYPE			WorkerType;
	SnapWorkerDispatchRoutine	pFun;
}SANP_WORKER_MAP_ENTRY, *PSANP_WORKER_MAP_ENTRY;

//映射表
#define SNAP_WORKER_BEGIN_MAP(name)	\
			static SANP_WORKER_MAP_ENTRY name[] = { 

#define	ON_SNAP_WORKER_MAP(WorkerType, pFun)	{WorkerType, pFun},

#define SNAP_WORKER_END_MAP()	\
			{SNAP_WORKER_INVALID, NULL}		\
		};

NTSTATUS DispatchSnapWorkerRoutine(PVOID  FltObject, SNAP_WORKER_TYPE WorkerTyper, PVOID WorkerParamBlock, BOOLEAN Wait);

//映射函数
VOID FLTAPI FltMainWorkerRoutine(PFLT_GENERIC_WORKITEM FltWorkItem, PFLT_FILTER Filter, PVOID Context);

//创建
typedef struct  tagSNAP_PRE_CREATE_FILE_PARAM
{
	PFLT_CALLBACK_DATA Data;
	PCFLT_RELATED_OBJECTS FltObjects;
	PVOID *CompletionContext;
}SNAP_PRE_CREATE_FILE_PARAM, *PSNAP_PRE_CREATE_FILE_PARAM;

NTSTATUS WriteLogLnWithTimeStampInWorkItem(IN char * fmt, IN ...);


